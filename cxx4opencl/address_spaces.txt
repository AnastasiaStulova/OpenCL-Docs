// Copyright 2019-2020 The Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

[[address_space]]
=== Address spaces

{cpp} for OpenCL inherits address space behavior from `OpenCL C v2.0 s6.5`.

This section only documents behavior related to {cpp} features. For example
conversion rules are extended from the qualification conversion but the
compatibility is determined using notation of sets and overlapping of address
spaces from Embedded C (`ISO/IEC JTC1 SC22 WG14 N1021 s3.1.3`). For OpenCL
it means that implicit conversions are allowed from a named address space
(except for `__constant`) to generic (`OpenCL C v2.0 6.5.5`). The reverse
conversion is only allowed explicitly. The `__constant` address space does
not overlap with any other and therefore no valid conversion between
`__constant` and any other address space exists. Most of the rules follow this
logic.

==== Casts

C-style casts follow rules of `OpenCL C v2.0 s6.5.5`. Conversions to generic
address space can be made by any {cpp} cast operator (as an implicit
conversion); converting from generic to named address space can only be done
using dedicated `addrspace_cast` operator. Operator `addrspace_cast` can only
convert between address spaces and no other conversions are allowed to occur.
Note that conversions between `__constant` and any other other address space
are disallowed.

[source,c]
----------
int * genptr;
__private float * ptrfloat = reinterpret_cast<__private float*>(genptr); //illegal.
__private int * ptr = addrspace_cast<__private int*>(genptr);
__private float * ptrfloat = addrspace_cast<__private float*>(genptr); //illegal.
float * genptrfloat = reinterpret_cast<float*>(ptr);
__constant int * constptr = addrspace_cast<__constant int*>(genptr); // illegal.
----------

[[references]]
==== References

Reference types can be qualified with an address space.

[source,c]
----------
__private int & ref = ...; // references int in __private address space.
----------

By default references will refer to generic address space objects, except
for dependent types that are not template specializations (see
<<addrspace-deduction, _Deduction_>>). Address space compatibility checks
are performed when references are bound to values. The logic follows the
rules from address space pointer conversion (`OpenCL v2.0 s6.5.5`).


[[addrspace-deduction]]
==== Deduction / Default address space

This section details what happens if address spaces for types are not
provided in the source code explicitly. Most of the logic for the address space
deduction (i.e. default address space) follows rules from `OpenCL 2.0 s6.5`.

References inherit rules from the pointers and therefore refer to generic
address space objects by default (see <<references, _References_>>).

Class static data members are deduced to `__global` address space.

All non-static member functions take an implicit object parameter `this`
that is a pointer type. By default the `this` pointer parameter is in the
generic address space. All concrete objects passed as an argument to the
implicit `this` parameter will be converted to the generic address
space first if such conversion is valid. Therefore programs using objects
in the `__constant` address space will not be compiled unless the address
space is explicitly specified using address space qualifiers on member
functions (see <<addrspace-member-function-qualifiers,
_Member function qualifier_>>) as the conversion between `__constant` 
and generic is disallowed. Member function qualifiers can also be used
in case conversion to the generic address space is undesirable (even if
it is legal). For example, a method can be implemented to exploit memory
access coalescing for segments with memory bank. This not only applies
to regular member functions but to constructors and destructors too.

Address spaces are not deduced for:

  * non-pointer/non-reference template parameters or any dependent types
    except for template specializations.
  * non-pointer/non-reference class members except for static data members
    that are deduced to `__global` address space.
  * non-pointer/non-reference alias declarations.
  * decltype expressions.

[source,c]
----------
template <typename T>
void foo() {
  T m; // address space of 'm' will be known at template instantiation time.
  T * ptr; // 'ptr' points to generic address space object.
  T & ref = ...; // 'ref' references an object in generic address space.
};

template <int N>
struct S {
  int i; // 'i' has no address space.
  static int ii; // 'ii' is in global address space.
  int * ptr; // 'ptr' points to generic address space int.
  int & ref = ...; // 'ref' references int in generic address space.
};

template <int N>
void bar()
{
  S<N> s; // 's' is in __private address space.
}
----------

[source,c]
----------
struct c1 {};
using alias_c1 = c1; // 'alias_c1' is 'c1'.
using alias_c1_ptr = c1 *; // 'alias_c1_ptr' is a generic address space pointer to 'c1'.
----------

[source,c]
----------
__kernel void foo()
{
  __local int i;
  decltype(i)* ii; // type of 'ii' is '__local int *__private'.
}
----------

For the placeholder type specifier `auto` an address space of the outer type is
deduced as if it would be any other regular type. However if auto is used in a
reference or pointer type, the address space of a pointee is taken from the type
of the initialization expression. The logic simply follows `const`/`volatile`
qualifiers.

[source,c]
----------
__kernel void foo()
{
  __local int i;
  constexpr int c = 1;
  
  __constant auto cai = c; // type of 'cai' is '__constant int' (no deduction).
  
  auto aii = cai; // type of 'aii' is '__private int' (regular deduction).

  auto *ptr = &i; // type of 'ptr' is '__local int * __private'
                // (addr space of a pointer is deduced regularly,
                // addr space of its pointee is taken from 'i').

  auto *&refptr = ptr; // type of 'refptr' is '__local int * & __private'
                       // (addr space of a reference and type of referencing object
                       // is deduced regularly,
                       // addr space of a pointee is taken from the pointee of 'ptr').
}
----------

[[addrspace-member-function-qualifiers]]
==== Member function qualifier

{cpp} for OpenCL allows specifying an address space qualifier on member
functions to signal that they are to be used with objects constructed
in a specific address space. This works just the same as qualifying
member functions with `const` or any other qualifiers. The overloading
resolution will select the candidate with the most specific address
space if multiple candidates are provided. If there is no conversion
to an address space among candidates, compilation will fail with a
diagnostic.

[source,c]
----------
struct C {
  void foo() __local;
  void foo();
};

__kernel void bar() {
  __local C c1;
  C c2;
  __constant C c3;
  c1.foo(); // will resolve to the first foo.
  c2.foo(); // will resolve to the second foo.
  c3.foo(); // error due to mismatching address spaces - can't convert to
            // __local or generic.
}
----------

==== Lambda function

The address space qualifier can be optionally added for lambda
expressions after the attributes. Similarly to method qualifiers
they will alter the default address space of lambda call operator
that has generic address space by default. 

[source,c]
----------
__kernel void test_qual() {
  auto priv1 = []() __private {};
  priv1();
  auto priv3 = []() __global {};
  priv3(); // error: lambda object and its expression have mismatching address space.
  __constant auto const3 = []() __constant{};
  const3();

  [&] () __global {} (); // error: lambda temporary is in __private address space.

  [&] () mutable __private {} ();
  [&] () __private mutable {} (); // error: mutable specifier should precede address space.
}
----------


==== Implicit special members

All implicit special members (default, copy or move constructor, copy or
move assignment, destructor) will be generated with the generic address
space.

[source,c]
----------
class C {
  // Has the following implicitly defined member functions
  // void C() /*__generic*/;
  // void C(const /*__generic*/ C &) /*__generic*/;
  // void C(/*__generic*/ C &&) /*__generic*/;
  // operator= '/*__generic*/ C &(/*__generic*/ C &&)';
  // operator= '/*__generic*/ C &(const /*__generic*/ C &) /*__generic*/;
}
----------

==== Builtin operators

All builtin operators are available in the specific address spaces, thus
no conversion to generic address space is performed.

==== Templates

There is no deduction of address spaces in non-pointer/non-reference
template parameters and dependent types (see <<addrspace-deduction,
_Deduction_>>). The address space of a template parameter is deduced
during type deduction if it is not explicitly provided in the
instantiation.

[source,c]
----------
 1 template<typename T>
 2 void foo(T* i){
 3   T var;
 4 }
 5
 6 __global int g;
 7 void bar(){
 8   foo(&g); // error: template instantiation failed as function scope variable
 9            // appears to be declared in __global address space (see line 3).
10 }
----------

It is not legal to specify multiple different address spaces between
template definition and instantiation. If multiple different address
spaces are specified in a template definition and instantiation,
compilation of such a program will fail with a diagnostic.

[source,c]
----------
template <typename T>
void foo() {
  __private T var;
}

void bar() {
  foo<__global int>(); // error: conflicting address space qualifiers are provided
                       // __global and __private.
}
----------

Once a template has been instantiated, regular restrictions for
address spaces will apply.

[source,c]
----------
template<typename T>
void foo(){
  T var;
}

void bar(){
  foo<__global int>(); // error: function scope variable cannot be declared in
                       // __global address space.
}
----------

==== Temporary materialization

All temporaries are materialized in `__private` address space. If a reference
with another address space is bound to them, a conversion will be generated
in case it is valid, otherwise compilation will fail with a diagnostic.

[source,c]
----------
int bar(const unsigned int &i);

void foo() {
  bar(1); // temporary is created in __private address space but converted
          // to generic address space of parameter reference.
}

__global const int& f(__global float &ref) {
  return ref; // error: address space mismatch between temporary object
              // created to hold value converted float->int and return
              // value type (can't convert from __private to __global).
}
----------

==== Construction, initialization and destruction

Construction, initialization and destruction of objects in `__private`
and `__global` address space follows the general principals of {cpp}. For
the program scope objects the implementation (i.e. compiler) defines an ABI
format for initialization and destruction of global objects before/after
all kernels are enqueued.

Objects in `__local` address space can not have initializers in
declarations and therefore a constructor can not be called. All objects
created in the local address space have undefined state at the beginning.
Developers are free to defined a special member function that can
initialize local address space objects after their declaration. Any
default values provided for the initialization of members in a class
declaration are ignored when creating the local address space objects.
Classes that are instantiated with local address space objects can not
have references as their members. The same restriction applies recursively
to the members of such classes. Destructors of local address space objects
are not invoked automatically. They can be called manually if required.

User defined constructors are not allowed to construct objects in `__constant`
address space. Such objects can be initialized using literals and
initialization lists if they do not require any user defined conversions.

Objects in `__constant` address space can be initialized using:
 * Literal expressions;
 * Uniform initialization syntax `{}`;
 * Using implicit constructors.
